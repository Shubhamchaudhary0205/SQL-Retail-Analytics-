/* ===================Aggregate Functions======================
# Case Study: Retail Analytics Using SQL 
Problem Statement: 
A national retail chain with stores spread across various regions wants to analyze its sales data 
to uncover trends in product performance, regional demand, and revenue contributions. The 
data team is tasked with using SQL (via SQLite) to extract actionable insights. 
Database Schema (4 Tables) 
1. Regions 
○ region_id (PK) 
○ region_name 
2. Stores 
○ store_id (PK) 
○ store_name 
○ region_id (FK → Regions) 
3. Products 
○ product_id (PK) 
○ product_name 
○ category 
○ price 
4. Sales 
○ sale_id (PK) 
○ store_id (FK → Stores) 
○ product_id (FK → Products) 
 
○ quantity 
 
○ sale_date 
 
 
ER Reference 
Regions (region_id)   
   │ 
   └───< Stores (store_id, region_id) 
           │ 
           └───< Sales (sale_id, store_id, product_id) 
                         ↑ 
                     Products (product_id) 
 
Note: Use SQL script given separately to create tables and populate records. Check if any corrections are 
required.  
Questions 

1. List all stores along with their region names. 
 
2. Find total revenue (price × quantity) generated by each store. 
 
3. Find the top 3 best-selling products by quantity. 
 
4. Show the total sales revenue generated in each region. 
 
5. Find the number of products sold in each category. 
 
6. List the products that have never been sold. 
 
7. Get the average quantity sold per product. 
 
8. Find the products with total sales quantity > 3 (using HAVING). 
 
9. Display sales records where quantity > 2 and date is after '2024-04-05'. 
 
10. Find the name of the region that generated the highest total sales revenue.

*/

-- ============================================
-- Step 1: Create Tables
-- ============================================
CREATE TABLE Regions (
    region_id INTEGER PRIMARY KEY,
    region_name TEXT NOT NULL
);

CREATE TABLE Stores (
    store_id INTEGER PRIMARY KEY,
    store_name TEXT NOT NULL,
    region_id INTEGER,
    FOREIGN KEY (region_id) REFERENCES Regions(region_id)
);

CREATE TABLE Products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT NOT NULL,
    category TEXT NOT NULL,
    price REAL NOT NULL
);

CREATE TABLE Sales (
    sale_id INTEGER PRIMARY KEY,
    store_id INTEGER,
    product_id INTEGER,
    quantity INTEGER,
    sale_date TEXT,
    FOREIGN KEY (store_id) REFERENCES Stores(store_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- ============================================
-- Step 2: Populate Tables with Sample Data (15+ records each)
-- ============================================
INSERT INTO Regions VALUES
(1, 'North'), (2, 'South'), (3, 'East'), (4, 'West');

INSERT INTO Stores VALUES
(101, 'Indore Central', 1),
(102, 'Bhopal MegaMart', 1),
(103, 'Mumbai Fashion', 4),
(104, 'Chennai ValueStore', 2),
(105, 'Kolkata Trendz', 3);

INSERT INTO Products VALUES
(201, 'Jeans', 'Apparel', 1200),
(202, 'T-Shirt', 'Apparel', 600),
(203, 'Smartphone', 'Electronics', 15000),
(204, 'Earphones', 'Electronics', 1500),
(205, 'Backpack', 'Accessories', 800),
(206, 'Sunglasses', 'Accessories', 1000),
(207, 'Shoes', 'Apparel', 2500),
(208, 'Laptop', 'Electronics', 55000),
(209, 'Watch', 'Accessories', 4000),
(210, 'Formal Shirt', 'Apparel', 900);

INSERT INTO Sales VALUES
(301, 101, 201, 2, '2024-01-15'),
(302, 101, 203, 1, '2024-01-20'),
(303, 102, 202, 3, '2024-01-25'),
(304, 103, 204, 2, '2024-02-01'),
(305, 104, 205, 5, '2024-02-10'),
(306, 104, 203, 2, '2024-02-18'),
(307, 105, 206, 3, '2024-03-01'),
(308, 105, 202, 1, '2024-03-05'),
(309, 103, 208, 1, '2024-03-10'),
(310, 102, 207, 1, '2024-03-15'),
(311, 101, 209, 1, '2024-03-18'),
(312, 104, 201, 2, '2024-03-20'),
(313, 105, 210, 3, '2024-03-22'),
(314, 101, 203, 1, '2024-03-25'),
(315, 102, 208, 1, '2024-03-28');

Select * from regions;
Select * from stores;
Select * from products;
Select * from sales;


-- ============================================
-- Questions and solutions :
-- ============================================
# 1. List all stores along with their region names. 

SELECT 
    s.store_name, 
    r.region_name
FROM 
    Stores s
JOIN 
    Regions r ON s.region_id = r.region_id;

-- ============================================

# 2. Find total revenue (price × quantity) generated by each store.

SELECT 
    st.store_name,
    SUM(p.price * s.quantity) AS total_revenue
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
JOIN 
    Stores st ON s.store_id = st.store_id
GROUP BY 
    st.store_name
ORDER BY 
    total_revenue DESC;

-- ============================================

# 3. Find the top 3 best-selling products by quantity. 

SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity_sold
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    total_quantity_sold DESC
LIMIT 3;

-- ============================================

# 4. Show the total sales revenue generated in each region. 

SELECT 
    r.region_name,
    SUM(p.price * s.quantity) AS total_revenue
FROM 
    Sales s
JOIN 
    Stores st ON s.store_id = st.store_id
JOIN 
    Regions r ON st.region_id = r.region_id
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    r.region_name
ORDER BY 
    total_revenue DESC;

-- ============================================

# 5. Find the number of products sold in each category. 

SELECT 
    p.category,
    SUM(s.quantity) AS total_products_sold
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    p.category
ORDER BY 
    total_products_sold DESC;

-- ============================================

# 6. List the products that have never been sold. 

SELECT 
    p.product_name
FROM 
    Products p
LEFT JOIN 
    Sales s ON p.product_id = s.product_id
WHERE 
    s.product_id IS NULL;

-- ============================================

# 7. Get the average quantity sold per product. 

SELECT 
    p.product_name,
    AVG(s.quantity) AS avg_quantity_sold
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    avg_quantity_sold DESC;

-- ============================================

# 8. Find the products with total sales quantity > 3 (using HAVING). 

SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity_sold
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    p.product_name
HAVING 
    total_quantity_sold > 3
ORDER BY 
    total_quantity_sold DESC;

-- ============================================

# 9. Display sales records where quantity > 2 and date is after '2024-04-05'. 
 
 SELECT *
FROM Sales
WHERE quantity > 2
  AND sale_date > '2024-04-05';

-- ============================================
 
# 10. Find the name of the region that generated the highest total sales revenue. 

SELECT 
    r.region_name,
    SUM(p.price * s.quantity) AS total_revenue
FROM 
    Sales s
JOIN 
    Stores st ON s.store_id = st.store_id
JOIN 
    Regions r ON st.region_id = r.region_id
JOIN 
    Products p ON s.product_id = p.product_id
GROUP BY 
    r.region_name
ORDER BY 
    total_revenue DESC
LIMIT 1;
